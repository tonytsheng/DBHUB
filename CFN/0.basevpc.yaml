
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: rdsStack

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.1.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.1.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.1.2.0/24

    #  PrivateSubnet1CIDR:
    #Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    #Type: String
    #Default: 10.1.3.0/24

    #  PrivateSubnet2CIDR:
    #Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    #Type: String
    #Default: 10.1.4.0/24

  SSHKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Choose a SSH key for the instances
    Default: awskey1

  LatestAmazonLinux2AMIId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  MyPcIpAddress:
    Type: String
    Default: 52.95.4.0/32

  RdsMasterUsername:
    Type: String
    Default: "postgres"
    NoEcho: true

  RdsMasterUserPassword:
    Type: String
    Default: "welcome1"
    NoEcho: true

Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVpc

  PublicSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public-AZ1

  PublicSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public-AZ2

          #  PrivateSubnetAz1:
          #    Type: AWS::EC2::Subnet
          #    Properties:
          #      VpcId: !Ref MyVpc
          #      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
          #      CidrBlock: !Ref PrivateSubnet1CIDR
          #      MapPublicIpOnLaunch: false
          #      Tags:
          #        - Key: Name
          #          Value: !Sub ${EnvironmentName} Private-AZ1

          #  PrivateSubnetAz2:
          #    Type: AWS::EC2::Subnet
          #    Properties:
          #      VpcId: !Ref MyVpc
          #      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
          #      CidrBlock: !Ref PrivateSubnet2CIDR
          #      MapPublicIpOnLaunch: false
          #      Tags:
          #        - Key: Name
          #          Value: !Sub ${EnvironmentName} Private-AZ2

  NatGatewayEipAz1:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayEipAz2:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayAz1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEipAz1.AllocationId
      SubnetId: !Ref PublicSubnetAz1
      Tags:
        - Key: Name
          Value : NatGatewayAz1

  NatGatewayAz2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEipAz2.AllocationId
      SubnetId: !Ref PublicSubnetAz2
      Tags:
        - Key: Name
          Value : NatGatewayAz2

  PublicRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public-AZ1

  PublicRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public-AZ2

  ## internet route rule
  DefaultPublicRouteAz1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableAz1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DefaultPublicRouteAz2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTableAz2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetAz1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableAz1
      SubnetId: !Ref PublicSubnetAz1

  PublicSubnetAz2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableAz2
      SubnetId: !Ref PublicSubnetAz2

####### private subnet section ########
#  PrivateRouteTableAz1:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref MyVpc
#      Tags:
#        - Key: Name
#          Value: !Sub ${EnvironmentName} Private-AZ1

      #  DefaultPrivateRouteAz1:
      #    Type: AWS::EC2::Route
      #    Properties:
      #      RouteTableId: !Ref PrivateRouteTableAz1
      #      DestinationCidrBlock: 0.0.0.0/0
      #      NatGatewayId: !Ref NatGatewayAz1

      #  PrivateSubnetAz1RouteTableAssociation:
      #    Type: AWS::EC2::SubnetRouteTableAssociation
      #    Properties:
      #      RouteTableId: !Ref PrivateRouteTableAz1
      #      SubnetId: !Ref PrivateSubnetAz1

      #  PrivateRouteTableAz2:
      #    Type: AWS::EC2::RouteTable
      #    Properties:
      #      VpcId: !Ref MyVpc
      #      Tags:
      #        - Key: Name
      #          Value: !Sub ${EnvironmentName} Private-AZ2

      #  DefaultPrivateRouteAz2:
      #    Type: AWS::EC2::Route
      #    Properties:
      #RouteTableId: !Ref PrivateRouteTableAz2
      #DestinationCidrBlock: 0.0.0.0/0
      #NatGatewayId: !Ref NatGatewayAz2

      #  PrivateSubnetAz2RouteTableAssociation:
      #    Type: AWS::EC2::SubnetRouteTableAssociation
      #    Properties:
      #      RouteTableId: !Ref PrivateRouteTableAz2
      #      SubnetId: !Ref PrivateSubnetAz2

######## Bastion RDS Client EC2 ###########
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "BastionSecurityGroup"
      GroupDescription: "BastionSecurityGroup"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp  ## ssh
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyPcIpAddress
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  BastionClientAz1:
    Type: AWS::EC2::Instance
    DependsOn: InternetGateway
    Properties:
      ImageId: !Ref LatestAmazonLinux2AMIId
      InstanceType: m5.xlarge
      SubnetId: !Ref PublicSubnetAz1
      KeyName: !Ref SSHKeyName
      SecurityGroupIds:
      - !Ref BastionSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 50
          VolumeType: gp2
          Encrypted: true
      Tags:
      - Key: Name
        Value: "BastionClientAz1"
      SourceDestCheck: false
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            set -x
            exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
            yum update -y
            yum install mysql -y
            yum install nc -y
            yum install -y amazon-linux-extras
            yum install -y postgresql
            cd /etc/yum.repos.d
            wget http://yum.oracle.com/public-yum-ol7.repo
            wget http://yum.oracle.com/RPM-GPG-KEY-oracle-ol7
            rpm --import RPM-GPG-KEY-oracle-ol7
            yum install -y yum-utils
            yum-config-manager --enable ol7_oracle_instantclient
            yum install -y oracle-instantclient18.3-sqlplus
            echo "export AWS_DEFAULT_REGION=${AWS::Region}" >> /home/ec2-user/.bash_profile
            echo "export ORACLE_HOME=/usr/lib/oracle/18.3/client64/" >> /home/ec2-user/.bash_profile
            echo "export LD_LIBRARY_PATH=/usr/lib/oracle/18.3/client64/lib/" >> /home/ec2-user/.bash_profile
            echo "export PATH=$PATH:/usr/lib/oracle/18.3/client64/bin" >> /home/ec2-user/.bash_profile


####### for RDS ######
  RdsDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "RdsDbSubnetGroup"
      DBSubnetGroupName: "RdsDbSubnetGroup"
      SubnetIds: 
        - !Ref PublicSubnetAz1
        - !Ref PublicSubnetAz2
      Tags: 
      - Key: Name
        Value: "RdsDbSubnetGroup"

  ## RDS DB Security Group
  RdsDbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "RdsDbSecurityGroup"
      GroupDescription: "RdsDbSecurityGroup"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcCIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  MySqlDb1:
    Type: AWS::RDS::DBInstance
    Properties: 
      DBInstanceIdentifier: "pg500"
      DBName: "pg500"
      AllocatedStorage: 100
      DBInstanceClass: "db.m5.2xlarge"
      MasterUsername: !Ref RdsMasterUsername
      MasterUserPassword: !Ref RdsMasterUserPassword
      StorageType: "io1"
      Iops: 5000
      Engine: "postgres"
      MultiAZ: true
      DBSubnetGroupName: !Ref RdsDbSubnetGroup
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RdsDbSecurityGroup
      StorageEncrypted: true
      DeletionProtection: false
      Tags:
      - Key: Name
        Value: "MySqlDb1"

################# Output Sections ###############
Outputs:
  BastionClientAz1:
    Value: !Sub "ssh -A ec2-user@${BastionClientAz1.PublicIp} ## BastionClientAz1 ${BastionClientAz1.PrivateIp}"


