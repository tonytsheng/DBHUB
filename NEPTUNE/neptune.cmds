installing gremlin
https://docs.aws.amazon.com/neptune/latest/userguide/access-graph-gremlin-console.html

add the right iam role to the neptune cluster
https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-IAM-add-role-cluster.html

## Overall Status
curl https:///nep100.cluster-cyt4dgtj55oy.us-east-2.neptune.amazonaws.com:8182/status

-- query status
curl https:///nep100.cluster-cyt4dgtj55oy.us-east-2.neptune.amazonaws.com:8182/gremlin/status

## Loader
see loadit script

curl -G https://nep100.cluster-cyt4dgtj55oy.us-east-2.neptune.amazonaws.com:8182/loader
{
    "status" : "200 OK",
    "payload" : {
        "loadIds" : [
            "33f4a50e-6980-4d70-b876-def749b2002d"
        ]
    }
}




curl -G https://nep2001-instance-1.czzdit7hfndz.us-east-2.neptune.amazonaws.com:8182/loader
{
    "status" : "200 OK",
    "payload" : {
        "loadIds" : [
            "33f4a50e-6980-4d70-b876-def749b2002d"
        ]
    }
}[ec2-user@ip-172-31-20-159 NEP]$ curl -G https://nep2001-instance-1.czzdit7hfnd.us-east-2.neptune.amazonaws.com:8182/loader/33f4a50e-6980-4d70-b876-def749b2002d
{
    "status" : "200 OK",
    "payload" : {
        "feedCount" : [
            {
                "LOAD_NOT_STARTED" : 7
            },
            {
                "LOAD_IN_PROGRESS" : 1
            },
            {
                "LOAD_COMPLETED" : 1
            }
        ],
        "overallStatus" : {
            "fullUri" : "s3://ttsheng-neptune-csv/Unsaved/2021/04/22",
            "runNumber" : 1,
            "retryNumber" : 0,
            "status" : "LOAD_IN_PROGRESS",
            "totalTimeSpent" : 30,
            "startTime" : 1619361128,
            "totalRecords" : 526443,
            "totalDuplicates" : 0,
            "parsingErrors" : 0,
            "datatypeMismatchErrors" : 0,
            "insertErrors" : 0
        }
    }
}[ec2-user@ip-172-31-20-159 NEP]$ curl -G https://nep2001-instance-1.czzdit7hfnd.us-east-2.neptune.amazonaws.com:8182/loader/33f4a50e-6980-4d70-b876-def749b2002d
{
    "status" : "200 OK",
    "payload" : {
        "feedCount" : [
            {
                "LOAD_NOT_STARTED" : 7
            },
            {
                "LOAD_IN_PROGRESS" : 1
            },
            {
                "LOAD_COMPLETED" : 1
            }
        ],
        "overallStatus" : {
            "fullUri" : "s3://ttsheng-neptune-csv/Unsaved/2021/04/22",
            "runNumber" : 1,
            "retryNumber" : 0,
            "status" : "LOAD_IN_PROGRESS",
            "totalTimeSpent" : 36,
            "startTime" : 1619361128,
            "totalRecords" : 646443,
            "totalDuplicates" : 0,
            "parsingErrors" : 0,
            "datatypeMismatchErrors" : 0,
            "insertErrors" : 0
        }
    }
}[ec2-user@ip-172-31-20-159 NEP]$
[ec2-user@ip-172-31-20-159 NEP]$ curl -G https://nep2001-instance-1.czzdit7hfndz.us-east-2.neptune.amazonaws.com:8182/loader/33f4a50e-6980-4d70-b876-def749b2002d
{
    "status" : "200 OK",
    "payload" : {
        "feedCount" : [
            {
                "LOAD_NOT_STARTED" : 7
            },
            {
                "LOAD_IN_PROGRESS" : 1
            },
            {
                "LOAD_COMPLETED" : 1
            }
        ],
        "overallStatus" : {
            "fullUri" : "s3://ttsheng-neptune-csv/Unsaved/2021/04/22",
            "runNumber" : 1,
            "retryNumber" : 0,
            "status" : "LOAD_IN_PROGRESS",
            "totalTimeSpent" : 38,
            "startTime" : 1619361128,
            "totalRecords" : 676443,
            "totalDuplicates" : 0,
            "parsingErrors" : 0,
            "datatypeMismatchErrors" : 0,
            "insertErrors" : 0
        }
    }
}[ec2-user@ip-172-31-20-159 NEP]$

## call gremlin for interactive query
/home/ec2-user/rpms/apache-tinkerpop-gremlin-console-3.4.10/bin/gremlin.sh
:remote connect tinkerpop.server /home/ec2-user/rpms/apache-tinkerpop-gremlin-console-3.4.10/conf/neptune-remote.yaml
:remote console

Create/Filter	addV, addE, has, hasId, hasLabel, filter, property, where
Find	both, bothV, bothE, choose, coalesce, in, inV, inE, out, outV, outE, repeat, until, times, select
Fetch	aggregate, path, project, properties, store, values, valueMap
Reduce	count, dedup
fold/unfold - display as lines or across a single line

gremlin> g.V().label().groupCount()
==>{continent=7, country=237, version=1, airport=3497}
gremlin> g.V().has('code', 'ORD').valueMap(true)
==>{country=[US], code=[ORD], longest=[13000], city=[Chicago], id=18, lon=[-87.90480042], label=airport, type=[airport], elev=[672], icao=[KORD], region=[US-IL], runways=[7], lat=[41.97859955], desc=[Chicago O'Hare International Airport]}

gremlin> g.V().has('code', 'ORD').valueMap(true).unfold()
==>country=[US]
==>code=[ORD]
==>longest=[13000]
==>city=[Chicago]
==>id=18
==>lon=[-87.90480042]
==>label=airport
==>type=[airport]
==>elev=[672]
==>icao=[KORD]
==>region=[US-IL]
==>runways=[7]
==>lat=[41.97859955]
==>desc=[Chicago O'Hare International Airport]
gremlin> g.V().count()
==>3742
gremlin> g.V("4").valueMap(true).unfold()
==>country=[US]
==>code=[BNA]
==>longest=[11030]
==>city=[Nashville]
==>id=4
==>lon=[-86.6781997680664]
==>label=airport
==>type=[airport]
==>elev=[599]
==>icao=[KBNA]
==>region=[US-TN]
==>runways=[4]
==>lat=[36.1245002746582]
==>desc=[Nashville International Airport]
gremlin>  g.V().has('code','ORD').out().path().by('code')
==>path[ORD, UST]
==>path[ORD, SUN]
==>path[ORD, MCW]
==>path[ORD, IWD]
==>path[ORD, BFM]
==>path[ORD, ATL]
==>path[ORD, ANC]
==>path[ORD, AUS]
==>path[ORD, BNA]
==>path[ORD, BOS]
==>path[ORD, BWI]
==>path[ORD, DCA]
==>path[ORD, DFW]
==>path[ORD, FLL]
==>path[ORD, IAD]
==>path[ORD, IAH]
==>path[ORD, JFK]
==>path[ORD, LAX]
==>path[ORD, LGA]
==>path[ORD, MCO]
==>path[ORD, MIA]
==>path[ORD, MSP]
==>path[ORD, PBI]
==>path[ORD, PHX]
==>path[ORD, RDU]
==>path[ORD, SEA]
==>path[ORD, SFO]
==>path[ORD, SJC]
==>path[ORD, TPA]
==>path[ORD, SAN]
==>path[ORD, SNA]
==>path[ORD, SLC]
==>path[ORD, LAS]
==>path[ORD, DEN]
==>path[ORD, HPN]
==>path[ORD, SAT]
==>path[ORD, MSY]
==>path[ORD, EWR]
==>path[ORD, CID]
==>path[ORD, HNL]
==>path[ORD, ELP]
==>path[ORD, SJU]
==>path[ORD, CLE]
==>path[ORD, OAK]
==>path[ORD, TUS]
==>path[ORD, PHL]
==>path[ORD, DTW]
==>path[ORD, YYZ]
==>path[ORD, YVR]
==>path[ORD, LHR]
==>path[ORD, LGW]
==>path[ORD, CDG]
==>path[ORD, FRA]
==>path[ORD, NRT]
==>path[ORD, DXB]
==>path[ORD, DEL]
==>path[ORD, DUB]
==>path[ORD, HKG]
==>path[ORD, AKL]
==>path[ORD, PEK]
==>path[ORD, PVG]
==>path[ORD, FCO]
==>path[ORD, AMS]
==>path[ORD, BCN]
==>path[ORD, MAD]
==>path[ORD, VIE]
==>path[ORD, ZRH]
==>path[ORD, YOW]
==>path[ORD, BRU]
==>path[ORD, MUC]
==>path[ORD, RSW]
==>path[ORD, MAN]
==>path[ORD, YUL]
==>path[ORD, YEG]
==>path[ORD, VCE]
==>path[ORD, ARN]
==>path[ORD, YYC]
==>path[ORD, HND]
==>path[ORD, DOH]
==>path[ORD, MXP]
==>path[ORD, ATH]
==>path[ORD, BUD]
==>path[ORD, ICN]
==>path[ORD, GRU]
==>path[ORD, MEX]
==>path[ORD, WAW]
==>path[ORD, ADD]
==>path[ORD, PIT]
==>path[ORD, PWM]
==>path[ORD, PDX]
==>path[ORD, OKC]
==>path[ORD, ONT]
==>path[ORD, ROC]
==>path[ORD, RST]
==>path[ORD, IST]
==>path[ORD, YHZ]
==>path[ORD, AUH]
==>path[ORD, YWG]
==>path[ORD, CPH]
==>path[ORD, CLT]
...
gremlin> g.V().has('code', 'BWI').valueMap(true)
==>{country=[US], code=[BWI], longest=[10502], city=[Baltimore], id=6, lon=[-76.66829681], label=airport, type=[airport], elev=[143], icao=[KBWI], region=[US-MD], runways=[3], lat=[39.17539978], desc=[Baltimore/Washington International Airport]}
gremlin>  g.V().has('code', 'ORD').valueMap(true).unfold()
==>country=[US]
==>code=[ORD]
==>longest=[13000]
==>city=[Chicago]
==>id=18
==>lon=[-87.90480042]
==>label=airport
==>type=[airport]
==>elev=[672]
==>icao=[KORD]
==>region=[US-IL]
==>runways=[7]
==>lat=[41.97859955]
==>desc=[Chicago O'Hare International Airport]
gremlin>  g.E().has('code', 'ORD').valueMap(true).unfold()



SQL - select country,count(country) from airports group by country;
g.V().hasLabel('airport').groupCount().by('country')

SQL - select a1.code,r1.dest,r2.dest,r3.dest from airports a1
  join routes r1 on a1.code=r1.src
  join routes r2 on r1.dest=r2.src
  join routes r3 on r2.dest=r3.src
  where a1.code='AUS' and r3.dest='AGR';
g.V().has('code','AUS').out().out().out().has('code','AGR').path().by('code')

g.V().has('airport','code','DFW').values('city')
g.V().has('airport','code','DFW').values('runways','icao')
g.V().has('airport','code','DFW').values('runways','icao','city')
g.V().groupCount().by(label)
g.V().hasLabel('airport').groupCount().by('country').select('FR','GR','BE')
g.V(3).out().limit(5).path().by(values('code','city').fold())

gremlin> g.V().has('airport','code','AUS').values()
==>airport
==>KAUS
==>Austin Bergstrom International Airport
==>US-TX
==>2
==>12250
==>542
==>US
==>Austin
==>30.1944999694824
==>-97.6698989868164
==>AUS

## look at AUS specifically
gremlin> g.V('3').out().path().by(values('code','city').fold())
==>path[[AUS, Austin], [ATL, Atlanta]]
==>path[[AUS, Austin], [BNA, Nashville]]
==>path[[AUS, Austin], [BOS, Boston]]
==>path[[AUS, Austin], [BWI, Baltimore]]
==>path[[AUS, Austin], [DCA, Washington D.C.]]
==>path[[AUS, Austin], [DFW, Dallas]]
==>path[[AUS, Austin], [FLL, Fort Lauderdale]]
...

## look at AUS but limit to 5 in result set
gremlin> g.V('3').out().limit(5).path().by(values('code','city').fold())
==>path[[AUS, Austin], [ATL, Atlanta]]
==>path[[AUS, Austin], [BNA, Nashville]]
==>path[[AUS, Austin], [BOS, Boston]]
==>path[[AUS, Austin], [BWI, Baltimore]]
==>path[[AUS, Austin], [DCA, Washington D.C.]]

## how many runways in airports in the US
gremlin> g.V().has('country','US').values('runways').fold()
==>[3, 3, 2, 3, 2, 3, 3, 1, 1, 2, 1, 1, 2, 2, 2, 2, 3, 3, 2, 2, 1, 2, 2, 3, 2, 4, 2, 3, 2, 3, 5, 1, 3, 4, 1, 3, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 3, 3, 1, 2, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 1, 1, 3, 1, 4, 2, 2, 2, 2, 4, 2, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 3, 3, 1, 3, 2, 2, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 4, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 3, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 3, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 2, 3, 4, 3, 6, 3, 4, 2, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 3, 1, 3, 2, 3, 2, 2, 2, 1, 2, 3, 3, 1, 2, 2, 2, 3, 3, 4, 4, 2, 1, 1, 3, 1, 2, 1, 2, 2, 3, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 3, 1, 3, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 3, 2, 2, 4, 2, 2, 1, 2, 3, 2, 2, 2, 2, 3, 1, 2, 3, 4, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 4, 3, 2, 2, 2, 2, 3, 1, 3, 4, 3, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 4, 3, 4, 7, 2, 3, 2, 2, 3, 4, 2, 2, 3, 1, 2, 3, 2, 3, 3, 2, 1, 4, 2, 3, 2, 3, 4, 2, 3, 2, 1, 3, 2, 3, 3, 4, 4, 4, 3, 3, 5, 1, 1, 1, 1, 1, 3, 1, 1, 1, 2, 3, 1, 2, 1, 2, 1, 3, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 3, 2, 1, 2, 1, 2, 1, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 3, 2, 2, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 2, 2, 3, 2, 2, 3, 2, 1, 2, 3, 4, 1, 1, 5, 1, 3, 2, 3, 1, 1, 2, 1, 1, 1, 2, 2, 5, 7, 6, 4, 3, 2, 2, 3, 3, 2, 2, 2, 3, 1, 2, 3, 2, 1, 2, 2, 2, 3, 2, 2, 2, 1, 2, 2, 3, 1, 2, 3, 2, 4, 4, 2, 4, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 3, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 4, 3, 2, 2, 2, 2, 4, 3, 2, 3, 2, 2, 1, 2, 3, 2, 2, 1, 4, 2, 2, 3, 2, 3, 2, 3, 2, 2, 2, 3, 2, 2, 3, 1, 1, 1, 2, 2, 2, 1, 2, 3, 2, 4, 3, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 1, 2, 2, 1, 3, 6, 3, 4, 1, 4, 2, 1, 1, 2, 1, 1, 1, 4, 4, 3, 3, 3, 4, 3]

## distinct runways in airports in the US - dedup
gremlin> g.V().has('country','US').values('runways').dedup().fold()
==>[3, 2, 1, 4, 5, 6, 7]

## fold vs unfold
gremlin>  g.V().has('country','US').values('runways').dedup().fold()
==>[3, 2, 1, 4, 5, 6, 7]
gremlin>  g.V().has('country','US').values('runways').dedup().unfold()
==>3
==>2
==>1
==>4
==>5
==>6
==>7

gremlin> g.V().has('lname','sheng').out().path().by('fname')
==>path[deanna, tony]
==>path[deanna, katie]
==>path[deanna, emily]
==>path[tony, deanna]
==>path[tony, katie]
==>path[tony, emily]
==>path[katie, deanna]
==>path[katie, tony]
==>path[katie, tony]
==>path[emily, tony]


## get the counts of nodes by labels
## note that this was after using the jupyter notebooks to load both 
## a knowledge graph - authors, posts, titles
## and a security graph - types of aws services

gremlin> g.V().groupCount().by(label)
==>{date=41, guardduty:detector=1, other=13, iam:role=14, ec2:network-interface=5, title=28, ec2:instance=3, commercial_item=2, iam:user=2, ec2:security-group=6, post=44, s3:bucket=4, tag=19, kms:key=1, image=1, ec2:vpc=1, author=41, rds:db=1, ec2:internet-gateway=1, events:rule=3, ec2:subnet=3, iam:instance-profile=2, iam:policy=12, organization=40, location=37, ec2:route-table=1, ec2:volume=3}
gremlin>


## twitter queries
# data model:
# the label is 'User'
# the field is 'name'
# the label is 'Tweet'
# the field is 'text'

g.V().hasLabel('User')
g.V().hasLabel('Tweet')
g.E().hasLabel('Follows')
g.E().hasLabel('Retweets')
g.E().hasLabel('Likes')



g.V().has('name', 'Theo Rowe').out('Likes').label()
g.V().has('name', 'Theo Rowe').in('Follows').values('name')
g.V().has('name', 'Theo Rowe').out('Retweets', 'Likes')
g.V().has('name', 'Theo Rowe').out('Retweets', 'Likes').values('text')
g.V().has('name', 'Theo Rowe').out('Retweets', 'Likes').out().values('name')
g.V().has('name','Theo Rowe').repeat(out().simplePath()).until(has('name','Angelo Herman')).limit(10).path().by('name')

g.V().has('text', 'Rich gifts wax poor when givers prove unkind.').valueMap()
g.V().has('text', 'Rich gifts wax poor when givers prove unkind.').out().label()


## when creating the data in excel, make sure it saves to csv and not unicode
## routes need to be modeled in both direction - child->parent and parent->child

# initiate reset
curl -X POST -H 'Content-Type: application/json' https://nep100-instance-1.cyt4dgtj55oy.us-east-2.neptune.amazonaws.com:8182/system -d '{ "action" : "initiateDatabaseReset" }'

# use the token id from the previous command 
curl -X POST -H 'Content-Type: application/json' https://nep100-instance-1.cyt4dgtj55oy.us-east-2.neptune.amazonaws.com:8182/system -d '{ "action" : "performDatabaseReset" , "token":"acc57082-ed42-0794-4370-8b5ecf0f9e55"}'




