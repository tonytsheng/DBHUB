Simple Proof of Concept for 2 Way Replication

A simple python database client that reads from a DynamoDB table
to determine which database engine and related endpoint information to connect to 
Used initially for a DMS 2WAY POC
DMS set up is not included in this directory yet

====
Set up DynamoDB 

1.cr8.ddb.appmap.py - create a DynamoDB table to store appmap information
2.ins.dyn.appmap.py - load a DynamoDB table called appmap with application id and database endpoint information

====
Set up RDBMS source and target 
Create your user/schemas/etc

3.cr8.ora.heart.sql - create an example heartbeat table in oracle
3.cr8.pg.heart.sql - create an example heartbeat table in postgresql

====
Set up DMS 

4.cr8.dms.repinstance.cli - set up a replication instance
5.cr8.dms.endpts.cli - set up source and target database endpoints
6.cr8.dms.migtask.cli - create a migration task - TODO


====
To run the simulated app:
python3 appinsert.v3.py SITEA|SITEB

====


TODO
finish DMS scripts

2022-06-30
- Cleanup
- Added DMS CLI setup scripts - rep instance, endpoints, still need to do migration task

2022-06-17
- Read from DynamoDB table based on input parameter
- Get engine
- Insert and Query latest based on which engine, inserting respective SITE
- Note that DMS migration tasks are not in this repo
- ins.dyn.appmap.py - loads appmap DDB table
- scan.dyn.appmap.cli - query appmap DDB table



- Heartbeat table, Unique index, Sequence
- Driver script to load data based on either SITEA or SITEB as an input parameter
- appmap - mapping file for database connection info based on site
- v2 - loaded appmap data into a dynamodb table - see ins.ddb.appmap.py

DMS config is not included in this directory
- Migration tasks must include loopback prevention
- Sequences are not replicated and therefore must be seeded per site
- No conflict resolution across sites

