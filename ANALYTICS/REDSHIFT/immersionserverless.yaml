AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DatabaseName:
    Description: The name of the first database to be created when the cluster is
      created
    Type: String
    Default: dev
    AllowedPattern: "([a-z]|[0-9])+"
  AdminUsername:
    Description: The user name that is associated with the admin user account for the cluster that is being created
    Type: String
    Default: awsuser
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
  AdminPassword:
    Description: The password that is associated with the admin user account for the cluster that is being created. Default is Awsuser123
    Type: String
    Default: Awsuser123
    NoEcho: 'true'
    MinLength: 8
    MaxLength: 64
    AllowedPattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^\x00-\x20\x22\x27\x2f\x40\x5c\x7f-\uffff]+'
  BaseRPU:
    Description: Base RPU for Redshift Serverless Workgroup.
    Type: Number
    MinValue: 32
    MaxValue: 512
    Default: 128
    AllowedValues: [32,40,48,56,64,72,80,88,96,104,112,120,128,136,144,152,160,168,176,184,192,200,208,216,224,232,240,248,256,264,272,280,288,296,304,312,320,328,336,344,352,360,368,376,384,392,400,408,416,424,432,440,448,456,464,472,480,488,496,504,512]
  InboundTraffic:
    Description: The IP address CIDR range (x.x.x.x/x) to connect from your local machine.  FYI, get your address using http://www.whatismyip.com.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '255.255.255.255/32'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  ConsumerCluster:
    Description: Option to spin up consumer cluster for the data sharing exercise
    Type: String
    Default: 'Yes'
    AllowedValues:
    - 'No'
    - 'Yes'
  PortNumber:
    Description: The port number on which the data sharing consumer cluster accepts incoming connections.
    Type: Number
    Default: '5439'
  NumberOfNodes:
    Description: The number of compute nodes in the data sharing consumer cluster.
    Type: Number
    MinValue: 2
    Default: 2
  NodeType:
    Description: The type of node to be provisioned for data sharing consumer cluster
    Type: String
    Default: ra3.4xlarge
    AllowedValues:
    - ra3.xlplus
    - ra3.4xlarge
    - ra3.16xlarge
  LaunchEC2Instance:
    Description: Option to launch an EC2 instance and DMS replication instance needed for Labs 11, 12, and 18 - includes AWS SCT, Sample Oracle Server w/ Oracle SQL Developer, Sample SQL Server w/ SQL Server Mgmt. Studio, Power BI, SQL Workbench/J w/ Redshift driver
    Type: String
    Default: 'Yes'
    AllowedValues:
    - 'No'
    - 'Yes'  
Conditions:
  OptInConsumerCluster: !Equals
    - !Ref ConsumerCluster
    - 'Yes'
  LaunchEC2: !Equals
    - !Ref LaunchEC2Instance
    - 'Yes'  
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Connection Details"
        Parameters:
          - DatabaseName
          - AdminUsername
          - AdminPassword
          - BaseRPU
          - InboundTraffic
          - ConsumerCluster
          - PortNumber
          - NodeType
          - NumberOfNodes
Resources:
  RedshiftRole:
    Type: AWS::IAM::Role
    Properties :
      RoleName: RedshiftServerlessImmersionRole
      AssumeRolePolicyDocument:
        Version : 2012-10-17
        Statement :
          -
            Effect : Allow
            Principal :
              Service :
                - redshift.amazonaws.com
            Action :
              - sts:AssumeRole
          -
            Effect : Allow
            Principal :
              Service :
                - redshift-serverless.amazonaws.com
            Action :
              - sts:AssumeRole
          -
            Effect : Allow
            Principal :
              Service :
                - sagemaker.amazonaws.com
            Action :
              - sts:AssumeRole
          -
            Effect : Allow
            Principal :
              Service :
                - events.amazonaws.com
            Action :
              - sts:AssumeRole
          -
            Effect : Allow
            Principal :
              Service :
                - scheduler.redshift.amazonaws.com
            Action :
              - sts:AssumeRole
      Path : /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/AmazonRedshiftFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
  RedshiftConsumerCluster:
    Type: AWS::CloudFormation::Stack
    Condition: OptInConsumerCluster
    Properties:
      TemplateURL: 'https://redshift-immersionday-labs.s3.us-west-2.amazonaws.com/DataSharingCluster_upd.yaml'
      Parameters:
        DatabaseName:
          Ref: DatabaseName
        NumberOfNodes:
          Ref: NumberOfNodes
        NodeType:
          Ref: NodeType
        MasterUsername:
          Ref: AdminUsername
        MasterUserPassword:
          Ref: AdminPassword
        InboundTraffic:
          Ref: InboundTraffic
        PortNumber:
          Ref: PortNumber
        RedshiftRole: !GetAtt 'RedshiftRole.Arn'
        SubnetA:
          Ref: Subnet1
        SubnetB:
          Ref: Subnet2
        RedshiftClusterSecurityGroup:
          Ref: SecurityGroup
  EC2InstanceStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: 'https://redshift-immersionday-labs.s3.us-west-2.amazonaws.com/EC2Instance.yaml'
      Parameters:
        RedshiftSubnetA:
          Ref: Subnet1
        RedshiftSubnetB:
          Ref: Subnet2
        RedshiftSecurityGroup:
          Ref: SecurityGroup
        InboundTraffic:
          Ref: InboundTraffic
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.30.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: 10.30.0.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId:
        Ref: VPC
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: 10.30.1.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId:
        Ref: VPC
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: 10.30.2.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      VpcId:
        Ref: VPC
  Subnet4:
      Type: AWS::EC2::Subnet
      Properties:
        MapPublicIpOnLaunch: true
        CidrBlock: 10.30.3.0/24
        AvailabilityZone: !Select [3, !GetAZs ""]
        VpcId:
          Ref: VPC
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group
      SecurityGroupIngress:
      - CidrIp:
          Ref: InboundTraffic
        FromPort: !Ref PortNumber
        ToPort: !Ref PortNumber
        IpProtocol: tcp
      VpcId:
        Ref: VPC
  SecurityGroupSelfReference:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Self Referencing Rule
      FromPort: -1
      IpProtocol: -1
      GroupId: !GetAtt [SecurityGroup, GroupId]
      SourceSecurityGroupId: !GetAtt [SecurityGroup, GroupId]
      ToPort: -1
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      RouteTableId:
        Ref: RouteTable
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: RouteTable
  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet3
      RouteTableId:
        Ref: RouteTable
  SubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet4
      RouteTableId:
        Ref: RouteTable
  RedshiftServerlessNamespace:
    Type: 'AWS::RedshiftServerless::Namespace'
    Properties:
      AdminUsername:
        Ref: AdminUsername
      AdminUserPassword:
        Ref: AdminPassword
      DbName:
        Ref: DatabaseName
      NamespaceName:  !Sub
          - 'namespace-${RandomGUID}'
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      IamRoles:
        - !GetAtt 'RedshiftRole.Arn'
      DefaultIamRoleArn: !GetAtt 'RedshiftRole.Arn'
  RedshiftServerlessWorkgroup:
    Type: 'AWS::RedshiftServerless::Workgroup'
    Properties:
      WorkgroupName: !Sub
          - 'workgroup-${RandomGUID}'
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      NamespaceName:  !Sub
          - 'namespace-${RandomGUID}'
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      BaseCapacity:
        Ref: BaseRPU
      PubliclyAccessible: 'false'
      SubnetIds:
        - Ref: Subnet1
        - Ref: Subnet2
        - Ref: Subnet3
        - Ref: Subnet4
      SecurityGroupIds:
        - Ref: SecurityGroup
    DependsOn:
      - RedshiftServerlessNamespace
Outputs:
  NamespaceName:
    Description: Namespace Name
    Value:
      Ref: RedshiftServerlessNamespace
  Workgroupname:
    Description: Workgroup Name
    Value:
      Ref: RedshiftServerlessWorkgroup
  AdminUsername:
    Description: Username to login to your Redshift cluster
    Value:
      Ref: AdminUsername
  AdminPassword:
    Description: Username to login to your Redshift cluster
    Value:
      Ref: AdminPassword
  VPC:
    Description: VPC ID for this configuration
    Value:
      Ref: VPC
  InboundTraffic:
    Description: CIDR range
    Value:
      Ref: InboundTraffic
  PortNumber:
    Description: Redshift port number for connections and security
    Value:
      Ref: PortNumber
  RedshiftRoleName:
    Description: Name of Redshift Role
    Value:
      Ref: RedshiftRole
  RedshiftRoleNameArn:
    Description: Name of Redshift Role with ARN FN tag
    Value:
      Fn::GetAtt: [RedshiftRole, Arn]
  RedshiftClusterSecurityGroupName:
    Description: Name of security group
    Value:
      Ref: SecurityGroup
