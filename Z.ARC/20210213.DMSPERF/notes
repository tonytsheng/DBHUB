dealing with lob data is a pretty common migration pattern

1 - load one single blob into one single row
used SQLWorkbench to load from a windows machine 
loaded a zip file into one blob column in one row

2 - used a script to insert into select from
that row into new rows

3 - populated to 531 rows for 94GB - customer_orders.stores
. . exported "CUSTOMER_ORDERS"."STORES"                  94.05 GB     531 rows

4 - size of lobs on source
SQL> select max(dbms_lob.getlength(logo))/1024/1024 as SizeMB from customer_orders.stores;

    SIZEMB
----------
841.534516

5 - size of lobs on target
select max(pg_column_size(customer_orders.stores.logo)) from customer_orders.stores;
65535 - assuming this is in kb - 

aurpg02=> select max(pg_column_size(customer_orders.stores.logo)) from customer_orders.stores;
   max
----------
 51200000
(1 row)
that is 51MBytes

aurpg02=> select max(pg_column_size(customer_orders.stores.logo)) from customer_orders.stores;
    max
-----------
 256000000
(1 row)


4 - use DMS to migrate the table
from oracle to aurora postgres
unique constraint on stores.name had to be dropped on source and target
subsecond replication - very fast
source instance -  oracle rds - db.m5.large
target instance - aurora postgres - db.r5.large 
dms instance - t3.medium - 2x4
size of table - 94G
number of rows - 531 rows
bumped up lob max size to 900,000
replication task out of memory 
modifying replication instance - takes a little while - 15 mins or so
bumped up to c5.2xlarge - 8x16 

LOB sizes
900,000k - 900MB - postgres copy failure
500,000k = 500MB - postgres copy failure
50,000k = 50 MB - this works, but lobs are truncated at source
100,000k = 100 MB - this works, but lobs are truncated at source

02-16T15:19:28:688347 [SOURCE_UNLOAD   ]W:  The value of column 'LOGO' in table 'CUSTOMER_ORDERS.STORES' was truncated to length 512000000  (oracle_endpoint_utils.c:2787)

2021-02-16 18:41:38 UTC:172.31.10.218(36156):postgres@aurpg02:[9861]:ERROR:  out of memory
2021-02-16 18:41:38 UTC:172.31.10.218(36156):postgres@aurpg02:[9861]:DETAIL:  Cannot enlarge string buffer containing 1073741807 bytes by 8192 more bytes.
2021-02-16 18:41:38 UTC:172.31.10.218(36156):postgres@aurpg02:[9861]:CONTEXT:  COPY stores, line 61
2021-02-16 18:41:38 UTC:172.31.10.218(36156):postgres@aurpg02:[9861]:STATEMENT:  COPY  "customer_orders"."stores" FROM STDIN WITH DELIMITER ',' CSV NULL 'attNULL' ESCAPE '\'

target instance - r5.4xlarge - 16x128
dropped constraints on target

50MB lob
531 rows
12m 57s - 239 rows in 13 minutes - 18 rows/minute
13 26 - 247
15 27 - 280 - 18 rows/minute

100MB lob
4m 43s - 64
5m 13s - 68
5m 43s - 72 - 12 rows/minute
6m 13s - 77 - 
7m 13s - 85 - 12 rows/minute 

250MB lob
2m 1s - 32
3m 1s - 36 - 12 rows/minute
6m 31 - 52 - 8 rows/minute
7m 1 - 54 - 7.7 rows/min

full lob mode
chunk size 100MB
does full 100MB at a time ?
versus rows at a time



* notes on autoscaling
also, rds puts a tight threshold on autoscale
it grows as you use it but leaves only 1-2% free
unlike if you self manage
uses every little bit
after activity settles down, it leaves 5% free

100G database
get size of table from export log
531 rows 94G for the stores table


++
reloaded table with smaller blobs
126333 rows
SQL> select max(dbms_lob.getlength(logo))/1024/1024 as SizeMB from customer_orders.stores;

    SIZEMB
----------
3.43498325

90% of the rows have a blob of 3M in the logo column
11 columns, 1 is a blob
ordinary data types
126K rows
replicating just single table
source instance -  oracle rds - db.m5.large - 2x8
target instance - aurora postgres - db.r5.4xlarge - 16x128
dms instance - dms.c5.2xlarge - 8x16
limited lob size
5000k max lob size

"CUSTOMER_ORDERS"."STORES"                  421.5 GB  126333 rows

42s - 315
1m12s - 948
1m42s - 1059
2m12s - 1173
2m42s - 1284 - 416 rows/min
3m12s - 1398
3m42s - 1509
4m12s - 1623 - 405 rows/min
4m42s - 1734
5m12s - 1848 - 369 rows/min 
5m42s - 1959 - 356 rows/min
6m12s - 2070 - 318 rows/min
6m42s - 2184 - 
7m42s - 2409 - 321 rows/min
11m12s - 3186 - 289 rows/min
11m42s - 3300 - 286 rows/min
13m42s - 3747 - 277 rows/min
16m12s - 4308 - 261 rows/min
21m42s - 5544 - 257 rows/min
24m12s - 6105
30m12s - 7449 - 248 rows/min
32m42s - 8007 - 246 rows/min
33m42s - 8232
34m42s - 8454 - 
35m42s - 8679
37m42s - 9126
41m12s - 9912
42m42s - 10248 - 244 rows/min
6h13m12s - 83889
6h14m12s - 84111 - 224 rows/min
6h17m12s - 84777 - 224 rows/min
7h5m42s - 95538
9h24m25s - 126333 - complete - 223 rows/min

SQL> desc customer_orders.stores
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 STORE_ID                                  NOT NULL NUMBER(38)
 STORE_NAME                                NOT NULL VARCHAR2(255 CHAR)
 WEB_ADDRESS                                        VARCHAR2(100 CHAR)
 PHYSICAL_ADDRESS                                   VARCHAR2(512 CHAR)
 LATITUDE                                           NUMBER
 LONGITUDE                                          NUMBER
 LOGO                                               BLOB
 LOGO_MIME_TYPE                                     VARCHAR2(512 CHAR)
 LOGO_FILENAME                                      VARCHAR2(512 CHAR)
 LOGO_CHARSET                                       VARCHAR2(512 CHAR)
 LOGO_LAST_UPDATED                                  DATE

SQL> select count(*), (dbms_lob.getlength(logo))/1024/1024 as SizeMB from customer_orders.stores group by (dbms_lob.getlength(logo))/1024/1024;

  COUNT(*)     SIZEMB
---------- ----------
         1  .06464386
       678 .079429626
    125632 3.43498325
        22          0


changed limited lob size to 3500k - 3.5M
2m21s - 1197 - 478/min
2m51s - 1311 - 437/min 
7m51s - 2433 - 304/min
54m21s - 12858 - 238/min
1h13m51s - 17235 - 236/min
2h40m21s - 36597 - 228/min
3h50m51s - 52320 - 227/min
4h11m51s - 56985 - 
4h41m51s - 63648 - 
5h4m21s - 68649 -  225/min
killed this no real change

#3 - set customer_orders.stores in pg to be unlogged
aurpg02=> alter table customer_orders.stores set unlogged;
this took about 10 mins to execute

2m47s - 1296 - 432/min
4m17s - 1632 - 408/min
5m47s - 1968 - 328/min
8m17s - 2529 - 316
38m47s - 9354 - 246
1h35m47s - 22101 - 232/min
1h41m47s - 23442
1h57m17s - 26898 - 230/min
turn on logging on table after migration
killed this no real improvement

#4 - 
set this in postgres endpoint maxFileSize=1048576
logging for target table is off
2m5s - 1286
2m35s - 1436
3m5s - 1586
3m35s - 1736
5m5s - 2186 - 
5m35s - 2336 - 424/min
6m5s - 2486
10m5s - 3686
10m35s - 3836 - 365/min
11m5s - 3986 - 363/min
12m35s - 4436 - 
17m35s - 5861 -  334/min
22m35s - 7361
23m5s - 7511 - 326/min
31m35s - 10000
1h26m5s - 26036 - 302/min
1h32m5s - 27836
3h35m5s - 64211 - 298/min
3h38m5s - 64961 - 296/min
3h39m5s - 65411 - 297/min
4h3m5s - 72311 -  297/min
4h56m5s - 87911 - 297/min
5h43m5s - 101711
5h49m35s - 103661 - 
5h55m35s - 105386 - 296/min
6h 5 s - 106736 - 296/min
6h18m35s - 112211
7h6m47s - 126333 - 296/min

aurpg02=> alter table customer_orders.stores set logged;
ALTER TABLE
Time: 430869.551 ms (07:10.870)


